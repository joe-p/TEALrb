#pragma version 6
b main
subroutine_method: // subroutine_method(x, y)
store 0 // subroutine_method: y
store 1 // subroutine_method: x
load 1 // subroutine_method: x
load 0 // subroutine_method: y
+
load 1 // subroutine_method: x
load 0 // subroutine_method: y
-
load 1 // subroutine_method: x
load 0 // subroutine_method: y
*
itob
concat
log
retsub
main:
// This comment will show in TEAL
// raw teal
byte "Key One" // this will be an in-line comment
int 111
app_global_put
int 100
int 200
+
// single method call
byte "Key Two"
int 222
app_global_put
// two step method call
byte "Key Three" // string literals are implicitly bytes
int 333
app_global_put
// Global put/get as hash
byte "Key Four"
int 444
app_global_put
byte "Key Five"
app_global_get
// Local put/get as hash
txn Sender
byte "Local Key"
byte "Some Value"
app_local_put
txn Receiver
byte "Local Key"
app_local_get
// using variables
byte "Key Four"
int 444
app_global_put
// combining raw teal with conditionals
byte "Bad Key"
app_global_get
bz if0_else0
err
b if0_end
if0_else0:
if0_end:
// more complex conditionals
byte "First Word"
app_global_get
byte "Hi"
==
bz if1_else0
byte "Second Word"
byte "Mom"
app_global_put
b if1_end
if1_else0:
byte "First Word"
app_global_get
byte "Hello"
==
bz if1_else1
byte "Second Word"
byte "World"
app_global_put
b if1_end
if1_else1:
byte "First Word"
app_global_get
byte "Howdy"
==
bz if1_else2
byte "Second Word"
byte "Partner"
app_global_put
b if1_end
if1_else2:
byte "Second Word"
byte "???"
app_global_put
if1_end:
// calling methods
// subroutine method
int 1
int 2
callsub subroutine_method
// teal method
int 3
int 4
+
// ruby method
int 11
// another_teal_method
int 1111
int 2222
store 2 // another_teal_method: b
store 3 // another_teal_method: a
load 3 // another_teal_method: a
load 2 // another_teal_method: b
/
// yet_another_teal_method
int 3333
int 4444
store 4 // yet_another_teal_method: arg2
store 5 // yet_another_teal_method: arg1
load 5 // yet_another_teal_method: arg1
load 4 // yet_another_teal_method: arg2
%
// accessing specific indexes/fields
gtxn 0 Sender // gtxn(0, 'Sender')
gtxn 0 Sender // Gtxn.sender(0)
gtxn 0 Sender // Gtxn[0].sender
gtxn 0 Sender // gtxn_var.sender
// manual branching
b manual_br
byte "Unreachable"
app_global_get
manual_br:
byte "Manual Br"
app_global_get
// placeholders
byte "Some Key"
REPLACE_ME
app_global_put
gtxn 1 ANOTHER_THING_TO_REPLACE
// TxnType enums
int pay
// store/load to named scratch slots
int 123
store 6 // some key
load 6 // some key
int 321
store 7 // another key
load 7 // another key
// while loops
while0:
byte "counter"
app_global_get
int 3
<
bz end_while0
byte "counter"
byte "counter"
app_global_get
int 1
+
app_global_put
b while0
end_while0:
byte 0x80 // bool: true
byte 0x0018 // uint32: 24
byte 0x7b // ufixed16x2: 1.23
byte 0x027b9c // ufixed16x2[2]: [1.23, 1.56]
byte 0x7b9c // ufixed16x2[]: [1.23, 1.56]
byte 0x8000187b // (bool, uint32, ufixed16x2): [true, 24, 1.23]