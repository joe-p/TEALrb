#pragma version 6

// src_map:demo.rb:63
b main

// src_map:demo.rb:12
helper_subroutine: // helper_subroutine(asa, axfer_txn)
	txn OnCompletion
	int NoOp
	==
	assert

	store 0 // helper_subroutine: axfer_txn [axfer]

	store 1 // helper_subroutine: asa [asset]

	// src_map:demo.rb:13
	load 0 // helper_subroutine: axfer_txn [axfer]
	gtxns Sender
	load 1 // helper_subroutine: asa [asset]
	asset_params_get AssetCreator
	pop
	==
	assert

	// src_map:demo.rb:14
	retsub

// src_map:demo.rb:28
some_abi_method: // some_abi_method(asa, axfer_txn, another_app, some_number)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Assets 0
	store 2 // some_abi_method: asa [asset] Some asset

	txn GroupIndex
	int 1
	-
	store 3 // some_abi_method: axfer_txn [axfer] A axfer txn

	txna Applications 0
	store 4 // some_abi_method: another_app [application] Another app

	txna ApplicationArgs 1
	btoi
	store 5 // some_abi_method: some_number [uint64]

	// src_map:demo.rb:29
	load 2 // some_abi_method: asa [asset] Some asset
	asset_params_get AssetUnitName
	swap
	pop
	assert

	// src_map:demo.rb:30
	load 3 // some_abi_method: axfer_txn [axfer] A axfer txn
	gtxns Sender
	txn Sender
	==
	assert

	// src_map:demo.rb:31
	load 4 // some_abi_method: another_app [application] Another app
	app_params_get AppExtraProgramPages
	swap
	pop
	assert

	// src_map:demo.rb:33
	load 2 // some_abi_method: asa [asset] Some asset
	load 3 // some_abi_method: axfer_txn [axfer] A axfer txn
	callsub helper_subroutine // calling helper_subroutine calls a subroutine

	// src_map:demo.rb:34
	// calling helper_teal_method writes TEAL in-place
	// src_map:demo.rb:35
	load 2 // some_abi_method: asa [asset] Some asset
	load 3 // some_abi_method: axfer_txn [axfer] A axfer txn
	gtxns Sender
	asset_params_get AssetCreator
	pop
	==
	assert

	// src_map:demo.rb:37
	load 5 // some_abi_method: some_number [uint64]
	int 1
	+
	itob
	byte "151f7c75"
	concat
	log

	// src_map:demo.rb:38
	retsub

// src_map:demo.rb:43
some_subroutine: // some_subroutine(n, m)
	txn OnCompletion
	int NoOp
	==
	assert

	store 6 // some_subroutine: m [bytes] Some bytes

	store 7 // some_subroutine: n [uint64] Some number

	// src_map:demo.rb:44
	load 6 // some_subroutine: m [bytes] Some bytes
	log

	// src_map:demo.rb:45
	load 7 // some_subroutine: n [uint64] Some number
	int 1
	+

	// src_map:demo.rb:46
	retsub

main:
	txna ApplicationArgs 0
	byte "a78bd94e"
	==
	bz if0_else0

	callsub some_abi_method

	int 1
	return

	b if0_end

if0_else0:

// src_map:demo.rb:63
if0_end:

	// src_map:demo.rb:64
	// src_map:demo.rb:65
	// This comment will show in TEAL
	// src_map:demo.rb:66
	// src_map:demo.rb:68
	// raw teal
	// src_map:demo.rb:69
	byte "Key One" // this will be an in-line comment

	// src_map:demo.rb:70
	int 111

	// src_map:demo.rb:71
	app_global_put

	// src_map:demo.rb:73
	int 100

	// src_map:demo.rb:74
	int 200

	// src_map:demo.rb:75
	+

	// src_map:demo.rb:77
	// single method call
	// src_map:demo.rb:78
	byte "Key Two"
	int 222
	app_global_put

	// src_map:demo.rb:80
	// two step method call
	// src_map:demo.rb:81
	byte "Key Three" // string literals are implicitly bytes

	// src_map:demo.rb:82
	int 333
	app_global_put

	// src_map:demo.rb:84
	// Global put/get as hash
	// src_map:demo.rb:85
	byte "Key Four"
	int 444
	app_global_put

	// src_map:demo.rb:86
	byte "Key Five"
	app_global_get

	// src_map:demo.rb:88
	// Local put/get as hash
	// src_map:demo.rb:89
	txn Sender
	byte "Local Key"
	byte "Some Value"
	app_local_put

	// src_map:demo.rb:90
	txn Receiver
	byte "Local Key"
	app_local_get

	// src_map:demo.rb:92
	// src_map:demo.rb:93
	// using variables
	// src_map:demo.rb:95
	// src_map:demo.rb:94
	byte "Key Four"

	// src_map:demo.rb:97
	// src_map:demo.rb:96
	int 444
	app_global_put

	// src_map:demo.rb:99
	// combining raw teal with conditionals
	// src_map:demo.rb:100
	byte "Bad Key"

	// src_map:demo.rb:101
	app_global_get
	bz if1_else0

	// src_map:demo.rb:102
	err

	// src_map:demo.rb:103
	b if1_end

if1_else0:

if1_end:

	// src_map:demo.rb:105
	// more complex conditionals
	// src_map:demo.rb:106
	byte "First Word"
	app_global_get
	byte "Hi"
	==
	bz if2_else0

	// src_map:demo.rb:107
	byte "Second Word"
	byte "Mom"
	app_global_put

	// src_map:demo.rb:108
	b if2_end

if2_else0:
	byte "First Word"
	app_global_get
	byte "Hello"
	==
	bz if2_else1

	// src_map:demo.rb:109
	byte "Second Word"

	// src_map:demo.rb:110
	byte "World"

	// src_map:demo.rb:111
	app_global_put

	// src_map:demo.rb:112
	b if2_end

if2_else1:
	byte "First Word"
	app_global_get
	byte "Howdy"
	==
	bz if2_else2

	// src_map:demo.rb:113
	byte "Second Word"
	byte "Partner"
	app_global_put

	// src_map:demo.rb:114
	b if2_end

if2_else2:

	// src_map:demo.rb:115
	byte "Second Word"
	byte "???"
	app_global_put

// src_map:demo.rb:116
if2_end:

	// src_map:demo.rb:118
	// src_map:demo.rb:119
	// calling methods
	// src_map:demo.rb:120
	// subroutine
	// src_map:demo.rb:121
	int 1
	byte "one"
	callsub some_subroutine

	// src_map:demo.rb:122
	// teal method
	// src_map:demo.rb:123
	// src_map:demo.rb:53
	// src_map:demo.rb:51
	int 3

	// src_map:demo.rb:52
	int 4
	+

	// src_map:demo.rb:54
	// src_map:demo.rb:124
	// ruby method
	// src_map:demo.rb:125
	int 11

	// src_map:demo.rb:127
	// src_map:demo.rb:128
	// accessing specific indexes/fields
	// src_map:demo.rb:129
	gtxn 0 Sender // gtxn(0, 'Sender')

	// src_map:demo.rb:130
	gtxn 0 Sender // Gtxn.sender(0)

	// src_map:demo.rb:131
	gtxn 0 Sender // Gtxn[0].sender

	// src_map:demo.rb:133
	// src_map:demo.rb:132
	gtxn 0 Sender // gtxn_var.sender

	// src_map:demo.rb:135
	// manual branching
	// src_map:demo.rb:136
	b manual_br

	// src_map:demo.rb:137
	byte "Unreachable"
	app_global_get

// src_map:demo.rb:138
manual_br:

	// src_map:demo.rb:139
	byte "Manual Br"
	app_global_get

	// src_map:demo.rb:141
	// placeholders
	// src_map:demo.rb:142
	byte "Some Key"
	REPLACE_ME
	app_global_put

	// src_map:demo.rb:143
	gtxn 1 ANOTHER_THING_TO_REPLACE

	// src_map:demo.rb:145
	// TxnType enums
	// src_map:demo.rb:146
	int pay

	// src_map:demo.rb:148
	// store/load to named scratch slots
	// src_map:demo.rb:149
	int 123
	store 8 // some key

	// src_map:demo.rb:150
	load 8 // some key

	// src_map:demo.rb:151
	int 321
	store 9 // another key

	// src_map:demo.rb:152
	load 9 // another key

// src_map:demo.rb:154
// src_map:demo.rb:155
// src_map:demo.rb:157
// src_map:demo.rb:159
// while loops
// src_map:demo.rb:160
while0:
	byte "counter"
	app_global_get
	int 3
	<
	bz end_while0

	// src_map:demo.rb:161
	byte "counter"
	byte "counter"
	app_global_get
	int 1
	+
	app_global_put

	// src_map:demo.rb:162
	b while0

end_while0:

	// src_map:demo.rb:164
	// opcodes with "maybe" values
	// src_map:demo.rb:166
	// using app_global_ex_exists? and app_global_ex_value
	// src_map:demo.rb:167
	int 1337
	byte "some_key"
	app_global_get_ex
	swap
	pop
	bz if3_else0

	// src_map:demo.rb:168
	int 1337
	byte "some_key"
	app_global_get_ex
	pop

	// src_map:demo.rb:169
	b if3_end

if3_else0:

	// src_map:demo.rb:170
	byte "some_key does not exist"
	log

// src_map:demo.rb:171
if3_end:

	// src_map:demo.rb:173
	// using app_global_get_ex and store/load
	// src_map:demo.rb:174
	int 1337
	byte "some_key"
	app_local_get_ex

	// src_map:demo.rb:175
	store 0

	// src_map:demo.rb:176
	store 1

	// src_map:demo.rb:181
	// src_map:demo.rb:178
	load 0
	bz if4_else0

	// src_map:demo.rb:182
	// src_map:demo.rb:179
	load 1

	// src_map:demo.rb:183
	b if4_end

if4_else0:

	// src_map:demo.rb:184
	byte "some_key does not exist"
	log

// src_map:demo.rb:185
if4_end:

	// src_map:demo.rb:187
	// inline if statement
	// src_map:demo.rb:188
	btoi
	int 10
	>
	bz if5_else0

	b label

	b if5_end

if5_else0:

if5_end:

	// src_map:demo.rb:190
	// Accessing arrays
	// src_map:demo.rb:191
	// Assets[0].creator
	// src_map:demo.rb:192
	txna Assets 0
	asset_params_get AssetCreator
	pop

	// src_map:demo.rb:193
	// Accounts[1].balance?
	// src_map:demo.rb:194
	txna Accounts 1
	acct_params_get AcctBalance
	swap
	pop

	// src_map:demo.rb:195
	// Apps[1 + 1].creator
	// src_map:demo.rb:196
	int 1
	int 1
	+
	txnas Applications
	app_params_get AppCreator
	pop

	// src_map:demo.rb:198
	// sratch var shorthand with $
	// src_map:demo.rb:199
	int 123
	store 10 // another_scatch_var

	// src_map:demo.rb:200
	load 10 // another_scatch_var

	// src_map:demo.rb:202
	byte "some box"
	int 40
	box_create

	// src_map:demo.rb:203
	byte "some box"
	box_get
	pop

	// src_map:demo.rb:204
	byte "some box"
	byte "some other value"
	box_put